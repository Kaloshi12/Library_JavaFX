import javafx.collections.ObservableList;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.control.ListCell;
import javafx.scene.control.ListView;
import javafx.scene.layout.BorderPane;
import javafx.stage.Stage;

public class Library_Client extends BorderPane {
    private Stage stageClient;
    private ListView<Books> list;
    private Button borrow;
    private Button back;
    private ObservableList<Books> borrowed_books;

    Library_Client() {
        stageClient = new Stage();
        list = new ListView<>(Books.getListbook());
        list.setCellFactory(param -> new ListCell<Books>() {
            @Override
            protected void updateItem(Books book, boolean empty) {
                super.updateItem(book, empty);

                if (empty || book == null) {
                    setText(null);
                    setStyle(""); // Clear any existing styles
                } else {
                    // Customize the text to display only title, author, pages, and quantities
                    setText(String.format("%s by %s - Pages: %d, Quantity: %d",
                            book.getTitle(), book.getAuthor(), book.getPages(), book.getQuantity()));

                    // Apply custom styles
                    setStyle("-fx-background-color: #e1f5fe; -fx-padding: 5px;");
                }
            }
        });

        // Apply styles to the ListView
        list.setStyle("-fx-background-insets: 0; -fx-padding: 10px;");
    }



    public void openStage() {
    	Scene scene = new Scene(list,600,800);
    	scene.getStylesheets().add(getClass().getResource("styles.css").toExternalForm());
    	stageClient.setScene(scene);
    	stageClient.show();
    }
}

